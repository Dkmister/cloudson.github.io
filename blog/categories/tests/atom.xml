<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tests | Claudson Oliveira]]></title>
  <link href="http://cloudson.github.io/blog/categories/tests/atom.xml" rel="self"/>
  <link href="http://cloudson.github.io/"/>
  <updated>2015-02-19T08:43:17-02:00</updated>
  <id>http://cloudson.github.io/</id>
  <author>
    <name><![CDATA[Claudson Oliveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD com phpunit: Um exemplo prático]]></title>
    <link href="http://cloudson.github.io/2015/02/18/tdd-com-phpunit-um-exemplo-pratico/"/>
    <updated>2015-02-18T09:00:00-02:00</updated>
    <id>http://cloudson.github.io/2015/02/18/tdd-com-phpunit-um-exemplo-pratico</id>
    <content type="html"><![CDATA[<p>Hoje falaremos sobre testes unitários. Por ser meu primeiro post no assunto, darei uma introdução até chegarmos na maior dificuldade para iniciantes, <em>mockar</em> objetos.<br/>
Os exemplos serão em php com <a href="https://phpunit.de/">phpunit</a>, mas os conceitos podem e devem ser utilizados em qualquer tecnologia.
O Post ficou um pouco extenso mas contém o básico pra começar.</p>

<h2>O que são e porque testamos software de forma automatizada ?</h2>

<p>A frase &ldquo;A computação veio pra resolver problemas que não existiam antes&rdquo; pode ser aplicada para nosso dia-a-dia como desenvolvedor de software. A cada novo release, existem chances de quebrarmos funcionalidades antigas. Em softwares monolíticos e pouco distribuídos a chance só aumenta.<br/>
As empresas costumam criar times ou dar papéis de testadores a certas pessoas. Esse papel define que a cada lançamento de bugfix ou feature, será preciso cobrir o software de testes para garantir que nada quebrou, o que torna o trabalho repetitivo, caro e cansativo.
E como sabemos, precisamos responder a mudanças de mercado cada vez mais rápido. O movimento agile com o pensamento em <a href="http://martinfowler.com/bliki/ContinuousDelivery.html">entregas curtas e contínuas</a> quase nos força a pensar numa maneira de facilitar as vidas dessas &ldquo;equipes de teste&rdquo;.<br/>
Entram os testes automatizados; Se somos escritores de programas, porque não fazer programas que testam programas? Dessa forma, a cada novo release, apenas rodaríamos o programa testador para ver se o software ainda se mantém consistente (, todos os testes passando).</p>

<h2>Testes unitários</h2>

<p>Dentro do mundo de testes automatizados, existem várias subdivisões, entre elas temos os testes unitários.  Nesse tipo de teste, verificamos se uma unidade mínima do software, um método de classe/instância por exemplo, nos responde com valores esperados em todos os casos cobertos.
Criamos uma classe que representa uma bateria com casos de teste, no phpunit da seguinte forma:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">arquivo</span> <span class="nx">em</span> <span class="o">/</span><span class="nx">meudiretorio</span><span class="o">/</span><span class="nx">algumacoisaTest</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AlgumacoisaTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Para rodar o arquivo, usamos o phpunit (que pode ser encontrado via arquivo .phar) :</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>phpunit.phar /meudiretorio/algumacoisaTest
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A saída no console será algo como
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;F&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 33 ms, Memory: 2.75Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There was 1 failure:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1<span class="o">)</span> Warning
</span><span class='line'>No tests found in class <span class="p">&amp;</span>ldquo<span class="p">;</span>AlgumacoisaTest<span class="p">&amp;</span>rdquo<span class="p">;</span>.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FAILURES!
</span><span class='line'>Tests: 1, Assertions: 0, Failures: 1.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ou seja, você criou uma bateria de testes mas não definiu nenhum caso de teste.</p>

<h2>Definindo um problema</h2>

<p>Vamos criar um problema em que uma classe irá nos atender.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Precisamos de um programa que mande e-mails de newsletter para usuários.&lt;br/&gt;
</span><span class='line'>Cada usuário se inscreve em apenas uma de duas opções:  Newsletter tecnologia ou Newsletter filosofia.
</span><span class='line'>Antes de cada envio é preciso perceber se o usuário não se descadastrou da lista,
</span><span class='line'>acessando uma api simples de um serviço chamado minhanews.io.
</span><span class='line'>Basta acessar a url &lt;a href=&quot;http://minhanews.io/&quot;&gt;http://minhanews.io/&lt;/a&gt;&lt;email&gt;/status e um json do tipo
</span><span class='line'>&amp;lsquo;{ tecnologia: true, filosofia: false }&amp;rsquo; será encontrado,
</span><span class='line'>onde as chaves dizem sobre o cadastro na newsletter.
</span><span class='line'>Como saída do programa queremos todos os e-mails que foram enviados. Agrupados por tipo de news.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>TDD</h2>

<p>Sobre testes temos uma prática chamada <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD (Testing driven development)</a>. Com ela os programadores sempre escrevem os testes antes do código. O que faz com que o código só exista para atender os testes.
Como um tempo, um ganho muito alto na arquitetura de código vem e isso também nos faz pensar melhor no problema antes de sair codando. <br/>
Vamos criar um roteiro para a soluão de nosso problema:</p>

<ul>
<li>Você possui uma coleção de e-mails.</li>
<li>Para cada e-mail verificar se o usuário ainda está cadastrado.</li>
<li>Se ainda estiver cadastrado envie o e-mail e guarde a conta numa coleção.</li>
<li>Se não estiver cadastrado na newsletter, ignore o usuário.</li>
<li>Retorne a coleção com os usuários que receberam e-mails.</li>
</ul>


<h2>Conhecendo um pouco as dependências</h2>

<h3>Coleção de usuários</h3>

<p>Vamos receber no método que iremos testar, um array de objetos do seguinte tipo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">const</span> <span class="no">NEWS_TECHNOLOGY</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="no">NEWS_PHILOSOPHY</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="nv">$email</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$news</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Setters e Getters ...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Enviando e-mail com o SwiftMailer</h3>

<p>Usaremos a library SwiftMailer para enviar o nosso e-mail de newsletter e uma introdução simples pode ser vista abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$transport</span> <span class="o">=</span> <span class="nx">Swift_SmtpTransport</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">smtp</span><span class="o">.</span><span class="nx">example</span><span class="o">.</span><span class="nx">org</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="mi">25</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">setUsername</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">your</span> <span class="nx">username</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">setPassword</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">your</span> <span class="nx">password</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">instanciando</span> <span class="nx">um</span> <span class="nx">mensageiro</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="nv">$mailer</span> <span class="o">=</span> <span class="nx">Swift_Mailer</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="nv">$transport</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">criando</span> <span class="nx">uma</span> <span class="nx">mensagem</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Assunto</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#114;&amp;#x65;&amp;#109;&amp;#101;&amp;#x74;&amp;#x65;&amp;#110;&amp;#116;&amp;#x65;&amp;#64;&amp;#100;&amp;#x6f;&amp;#101;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#114;&amp;#x65;&amp;#x6d;&amp;#101;&amp;#x74;&amp;#x65;&amp;#110;&amp;#x74;&amp;#x65;&amp;#x40;&amp;#x64;&amp;#111;&amp;#101;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&amp;rsquo; =&gt; &amp;lsquo;John Doe&amp;rsquo;))</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x64;&amp;#101;&amp;#115;&amp;#116;&amp;#105;&amp;#x6e;&amp;#x61;&amp;#116;&amp;#97;&amp;#114;&amp;#x69;&amp;#x6f;&amp;#64;&amp;#x64;&amp;#x6f;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6e;&amp;#46;&amp;#111;&amp;#x72;&amp;#103;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#100;&amp;#x65;&amp;#x73;&amp;#116;&amp;#x69;&amp;#110;&amp;#x61;&amp;#116;&amp;#97;&amp;#x72;&amp;#105;&amp;#111;&amp;#64;&amp;#100;&amp;#x6f;&amp;#109;&amp;#97;&amp;#105;&amp;#x6e;&amp;#46;&amp;#111;&amp;#114;&amp;#x67;&lt;/a&gt;&amp;rsquo;, &amp;lsquo;&lt;a href=&quot;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#x3a;&amp;#x6f;&amp;#x75;&amp;#116;&amp;#x72;&amp;#111;&amp;#x40;&amp;#x64;&amp;#x6f;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#110;&amp;#46;&amp;#x6f;&amp;#114;&amp;#x67;&quot;&gt;&amp;#x6f;&amp;#117;&amp;#x74;&amp;#x72;&amp;#111;&amp;#x40;&amp;#x64;&amp;#x6f;&amp;#109;&amp;#97;&amp;#105;&amp;#110;&amp;#x2e;&amp;#x6f;&amp;#x72;&amp;#103;&lt;/a&gt;&amp;rsquo; =&gt; &amp;lsquo;Um nome&amp;rsquo;))</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">setBody</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Sua</span> <span class="nx">mensagem</span><span class="o">!&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="nx">enviando</span> <span class="nx">a</span> <span class="nx">mensagem</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Requisições http com Guzzle</h3>

<p>Como precisaremos acessar uma url para verificarmos o tipo de newsletter dos usuários, usaremos o melhor client http em php, o Guzzle. A ferramenta é manipulada da seguinte forma:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GuzzleHttp\Client</span><span class="p">();</span>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;http://seusite.com.br&quot;</span><span class="o">&gt;</span><span class="nx">http</span><span class="o">://</span><span class="nx">seusite</span><span class="o">.</span><span class="nx">com</span><span class="o">.</span><span class="nx">br</span><span class="o">&lt;/</span><span class="nx">a</span><span class="o">&gt;&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">json</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Autoloading</h3>

<p>Não iremos abordar o autoloading de arquivos nesse post, você poderia utilizar o <a href="https://getcomposer.org/doc/01-basic-usage.md#autoloading">autoload do composer</a> e a <a href="https://phpunit.de/manual/current/en/textui.html">opção de bootstraping do phpunit</a> para resolver o problema</p>

<h2>Mão na massa, primeiro teste</h2>

<p>Vamos começar finalmente a codar. O TDD afirma, como disse, que primeiro escrevemos testes. Vamos começar todo nome de método de teste com o prefixo test, assim o phpunit entederá que precisa rodá-lo.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NewsletterTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaRetornarGruposVaziosSeRecebeuNenhumEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// valor esperado</span>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Newsletter</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// valor encontrado</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendAll</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// asserção: valor encontrado é o valor esperado ? </span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$groups</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>O nome que damos para os testes devem ser auto explicativos, nesse caso ele diz que a chamada de &ldquo;sendAll&rdquo; deveria não enviar nenhum email e consequentemente ter arrays vazios como retorno.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Fatal error: Class <span class="p">&amp;</span>lsquo<span class="p">;</span>Newsletter<span class="p">&amp;</span>rsquo<span class="p">;</span> not found in /meudiretorio/news.php on line 13
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Claro que o teste irá falhar, a classe que será coberta pelos testes (Newsletter) ainda não foi criada. Simplesmente iremos escrevê-la.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Outro erro irá ocorrer quando rodarmos os testes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Fatal error: Call to undefined method Newsletter::sendAll<span class="o">()</span> in /meudiretorio/news.php on line 20
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Temos que nos preocupar primeiro em passar o teste, codamos o mínimo para que isso aconteça:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>O teste passou!
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 33 ms, Memory: 2.75Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;OK <span class="o">(</span>1 <span class="nb">test</span>, 1 assertion<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>E sim, o código que produzimos é muito imaturo, mas ele atende ao nosso primeiro passo, e a intenção é justamente não desenvolver todo o algoritmo de uma vez.</p>

<h2>Segundo teste</h2>

<p>Vamos criar um segundo teste que faça nosso código evoluir, afinal queremos resolver todo o problema proposto.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NewsletterTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;//</span> <span class="nx">primeiro</span> <span class="nx">teste</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaTerUmEmailNoGrupoDeTecnologia</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// usuario do tipo tecnologia</span>
</span><span class='line'>    <span class="nv">$email</span> <span class="o">=</span> <span class="s2">&quot;cloudson@outlook.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setEmail</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setNews</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// valor esperado diz que um email de tecnologia foi enviado para cloudson@outlook.com</span>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[</span><span class="nv">$email</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// passaremos uma coleção com um usuário</span>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Newsletter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendAll</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$groups</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;.F&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 182 ms, Memory: 3.00Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There was 1 failure:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1<span class="o">)</span> NewsletterTest::testDeveriaEnviarUmEmailDeTecnologia
</span><span class='line'>Failed asserting that two arrays are equal.
</span><span class='line'><span class="p">&amp;</span>mdash<span class="p">;&amp;</span>ndash<span class="p">;</span> Expected
</span><span class='line'>+++ Actual
</span><span class='line'>@@ @@
</span><span class='line'> Array <span class="o">(</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=</span><span class="p">&amp;</span>gt<span class="p">;</span> Array <span class="o">(</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;ul&gt;
</span><span class='line'>&lt;li&gt;&lt;pre&gt;&lt;code&gt; <span class="nv">0</span> <span class="o">=</span><span class="p">&amp;</span>gt<span class="p">;</span> <span class="s1">&#39;cloudson@outlook.com&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; <span class="o">)</span>
</span><span class='line'> <span class="p">&amp;</span>lsquo<span class="p">;</span>filosofia<span class="p">&amp;</span>rsquo<span class="p">;</span> <span class="o">=</span>&gt; Array <span class="o">()</span>
</span><span class='line'><span class="o">)</span>&lt;/p&gt;&lt;/li&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/meudiretorio/news.php:83&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FAILURES!
</span><span class='line'>Tests: 2, Assertions: 2, Failures: 1.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Novamente iremos nos concentrar em fazer o teste passar, mas nos atentando ao fato de não quebrar o primeiro teste.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="c1">// recebe a coleção de usuários, e assume que todos são do tipo tecnologia</span>
</span><span class='line'>    <span class="c1">// perceba que se a coleção for vazia, continuamos com o comportamento anterior</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$groups</span><span class="p">[</span><span class="s1">&#39;tecnologia&#39;</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;..&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 42 ms, Memory: 2.75Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;OK <span class="o">(</span>2 tests, 2 assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Refatorando código</h2>

<p>Uma das mais importantes etapas do desenvolvimento orientado a testes é a refatoração, nela modificamos o código sem alterar o sentido do mesmo, e consequentemente, sem quebrar os testes.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// apenas alteramos a forma como se descobre em que grupo de  newsletter o</span>
</span><span class='line'>        <span class="c1">// usuário está.</span>
</span><span class='line'>        <span class="nv">$key</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNews</span><span class="p">()</span> <span class="o">==</span> <span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;tecnologia&#39;</span> <span class="o">:</span> <span class="s1">&#39;filosofia&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$groups</span><span class="p">[</span><span class="nv">$key</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Se você rodar os testes, eles continuam passando.</p>

<h2>Injeção de dependência</h2>

<p>Como sabemos vamos precisar que nosso método sendAll mande uma request para a api minhanews.io usando o Guzzle e envie um e-mail com o SwiftMailer.
Com essa relação de dependência entre nossa classe e as duas ferramentas, podemos usar um padrão chamado <a href="http://stackoverflow.com/questions/130794/what-is-dependency-injection">injeção de dependência (DI)</a> onde simplesmente recebemos as dependências de fora da classe, como argumentos no construtor, por exemplo.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">private</span> <span class="nv">$http</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\Guzzle\Client</span> <span class="nv">$http</span><span class="p">,</span> <span class="nx">\Swift_Mailer</span> <span class="nv">$mailer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">http</span> <span class="o">=</span> <span class="nv">$http</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$key</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNews</span><span class="p">()</span> <span class="o">==</span> <span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;tecnologia&#39;</span> <span class="o">:</span> <span class="s1">&#39;filosofia&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$groups</span><span class="p">[</span><span class="nv">$key</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Se rodarmos os testes, veremos que quebramos tudo, ou seja, os dois testes não correspondem ao estado atual do código.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;EE&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 37 ms, Memory: 2.75Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There were 2 errors:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1<span class="o">)</span> NewsletterTest::testDeveriaRetornarGruposVaziosSeRecebeuNenhumEmail
</span><span class='line'>Argument 1 passed to Newsletter::__construct<span class="o">()</span> must be an instance of Guzzle<span class="se">\C</span>lient, none given, called in /home/cloudson/Desktop/news.php on line 72 and defined&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/home/cloudson/Desktop/news.php:38
</span><span class='line'>/home/cloudson/Desktop/news.php:72&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2<span class="o">)</span> NewsletterTest::testDeveriaEnviarUmEmailDeTecnologia
</span><span class='line'>Argument 1 passed to Newsletter::__construct<span class="o">()</span> must be an instance of Guzzle<span class="se">\C</span>lient, none given, called in /home/cloudson/Desktop/news.php on line 95 and defined&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;/home/cloudson/Desktop/news.php:38
</span><span class='line'>/home/cloudson/Desktop/news.php:95&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FAILURES!
</span><span class='line'>Tests: 2, Assertions: 0, Errors: 2.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Mockando classes</h2>

<p>Poderíamos simplesmente instanciar e passar as dependências necessárias para nossa classe Newsletter. Mas pensando em testes que verificam a integridade de uma porção pequena de código isso pode ser complicado. Pense que estamos falando de dependências que irão enviar e-mail e requisições http, recursos externos que podem estar fora do ar (quem garante que teremos internet? Que a api irá responder corretamente? Que a máquina não bloqueia as portas de smtp? ). Para evitar que o sucesso de nossos testes dependam de outros fatores, além do código propriamente dito, criamos instâncias fakes que simulam o comportamento de uma dependência real.<br/>
Há várias formas de simular esse comportamento como você pode ver num <a href="http://martinfowler.com/articles/mocksArentStubs.html">artigo do Martin Fowler</a>, a forma que iremos tratar é a de Mocking.
É importante dizer que essa técnica só é possível graças a injeção de dependência, se instanciássemos classes dentro de nossa Newsletter, não teríamos a possibilidade de substituir uma real por uma fake.
Veja abaixo como criar um mock da classe Swift_Mailer usando o phpunit</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// &amp;hellip; dentro de uma class \PHPUnit_Framework_TestCase &amp;hellip;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$mailer</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getMockBuilder</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">\Swift_Mailer</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span><span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">disableOriginalConstructor</span><span class="p">()</span><span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&gt;</span><span class="nx">getMock</span><span class="p">();</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Vamos agora reescrever a classe de teste e utilizar os mocks nos momentos certos, atente-se aos comentários:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NewsletterTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$client</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$service</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// esse método é chamado antes de cada teste :) </span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// mockamos as duas dependencias</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getMockBuilder</span><span class="p">(</span><span class="s1">&#39;\Swift_Mailer&#39;</span><span class="p">)</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">disableOriginalConstructor</span><span class="p">()</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getMock</span><span class="p">();</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">client</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getMockBuilder</span><span class="p">(</span><span class="s1">&#39;\Guzzle\Client&#39;</span><span class="p">)</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">disableOriginalConstructor</span><span class="p">()</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getMock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// utilizamos um atributo de instância com as dependências</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">service</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Newsletter</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">client</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaRetornarGruposVaziosSeRecebeuNenhumEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// utilzamos o atributo de instância ao inves de instanciar a classe Newsletter</span>
</span><span class='line'>    <span class="c1">// a todo momento.</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendAll</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$groups</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaEnviarUmEmailDeTecnologia</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$email</span> <span class="o">=</span> <span class="s2">&quot;cloudson@outlook.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setEmail</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setNews</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[</span><span class="nv">$email</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendAll</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">assertEquals</span><span class="p">(</span><span class="nv">$expected</span><span class="p">,</span> <span class="nv">$groups</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Os testes voltam a passar e agora vamos novamente evoluir nosso código a partir de um novo teste, em que afirmaremos que &ldquo;o switfmail irá enviar um email para o usuario&rdquo;.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NewsletterTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;//</span> <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaEnviarEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$email</span> <span class="o">=</span> <span class="s2">&quot;cloudson@outlook.com&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setemail</span><span class="p">(</span><span class="nv">$email</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setnews</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[</span><span class="nv">$email</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ordenamos que o mock de swiftmailer espera rodar uma vez o método send.</span>
</span><span class='line'>    <span class="c1">// Isso funciona como uma asserção. </span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">once</span><span class="p">())</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">method</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendall</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;..F&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 40 ms, Memory: 3.25Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;There was 1 failure:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;1<span class="o">)</span> NewsletterTest::testDeveriaEnviarEmail
</span><span class='line'>Expectation failed <span class="k">for </span>method name is equal to <span class="p">&amp;</span>lt<span class="p">;</span>string:send&gt; when invoked 1 <span class="nb">time</span><span class="o">(</span>s<span class="o">)</span>.
</span><span class='line'>Method was expected to be called 1 <span class="nb">times</span>, actually called 0 times.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;FAILURES!
</span><span class='line'>Tests: 3, Assertions: 3, Failures: 1.
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ao rodar os testes, vemos que o phpunit nos disse que send() era esperado 1 vez e não foi invocado nenhuma vez, em nossa classe Newsletter, iremos usá-lo.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$key</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNews</span><span class="p">()</span> <span class="o">==</span> <span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;tecnologia&#39;</span> <span class="o">:</span> <span class="s1">&#39;filosofia&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;Wonderful Subject&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;cloudson@claudson.com.br&#39;</span><span class="p">))</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">()))</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setBody</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'>              <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$groups</span><span class="p">[</span><span class="nv">$key</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Testes passando.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>PHPUnit 4.5.0 by Sebastian Bergmann and contributors.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="p">&amp;</span>hellip<span class="p">;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Time: 237 ms, Memory: 3.25Mb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;OK <span class="o">(</span>3 tests, 3 assertions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Mockando o Guzzle</h2>

<p>Para este post estamos chegando no último passo. Estamos enviando e-mail para todos os usuários, mas a especificação dizia que era preciso verificar se eles não se descadastraram. Vamos usar nosso mock de \Guzzle\Client para simular uma chamada get e um retorno para ela. Veja abaixo</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ResponseSubscribed</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">true</span><span class="p">,</span> <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ResponseUnSubscribed</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">json</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">false</span><span class="p">,</span> <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">false</span>
</span><span class='line'>    <span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;//</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="nx">dentro</span> <span class="k">do</span> <span class="nx">metodo</span> <span class="nx">setup</span> <span class="nx">da</span> <span class="nx">classe</span> <span class="nx">de</span> <span class="nx">testes</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">client</span><span class="o">-&gt;</span><span class="na">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">any</span><span class="p">())</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">method</span><span class="p">(</span><span class="s1">&#39;get&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">will</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">returnCallback</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$url</span><span class="p">){</span>
</span><span class='line'><span class="c1">// Perceba, estamos usando any() pra definir que o método get pode ser chamado várias </span>
</span><span class='line'><span class="c1">//vezes, e que pra cada uma delas ele irá retornar um valor que é decidido por uma função </span>
</span><span class='line'><span class="c1">//anônima. </span>
</span><span class='line'><span class="c1">// Nessa função estamos usando as classes definidas acima que também simulam</span>
</span><span class='line'><span class="c1">// comportamentos do Guzzle. Nesse caso estamos usando stubs, mas não</span>
</span><span class='line'><span class="c1">// entraremos em detalhe nesse post. </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ResponseSubscribed</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="s2">&quot;cloudson&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ResponseUnSubscribed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Da ultima vez que afirmamos algo sobre um método mockado, o fizemos dentro do método de teste, pois ele era restrito para o teste. Nesse caso vamos colocar esse código no setup() dos testes pois imaginamos que esse comportamento será padrão.</p>

<p>Agora, evoluindo nosso código, já podemos chamar o guzzle para verificar o status dos usuários  e definir se eles se descadastraram das newsletters.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Newsletter</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">private</span> <span class="nv">$http</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="nv">$mailer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">\Guzzle\Client</span> <span class="nv">$http</span><span class="p">,</span> <span class="nx">\Swift_Mailer</span> <span class="nv">$mailer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">http</span> <span class="o">=</span> <span class="nv">$http</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span> <span class="o">=</span> <span class="nv">$mailer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">sendAll</span><span class="p">(</span><span class="nv">$users</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$users</span> <span class="k">as</span> <span class="nv">$user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">http</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;http://minhanews.io/&#39;</span><span class="o">.</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;/status&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">json</span><span class="p">(),</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;tecnologia&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;filosofia&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$key</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getNews</span><span class="p">()</span> <span class="o">==</span> <span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;tecnologia&#39;</span> <span class="o">:</span> <span class="s1">&#39;filosofia&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$message</span> <span class="o">=</span> <span class="nx">Swift_Message</span><span class="o">::</span><span class="na">newInstance</span><span class="p">(</span><span class="s1">&#39;Wonderful Subject&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setFrom</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;cloudson@claudson.com.br&#39;</span><span class="p">))</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setTo</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">()))</span>
</span><span class='line'>              <span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setBody</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
</span><span class='line'>              <span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">send</span><span class="p">(</span><span class="nv">$message</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$groups</span><span class="p">[</span><span class="nv">$key</span><span class="p">][]</span> <span class="o">=</span> <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">getEmail</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$groups</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Último teste</h2>

<p>Fugindo um pouco do TDD e escrevendo testes depois do código, vamos assegurar que quando a api diz que um usuario está descadastrado, ele não recebe e-mails</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">NewsletterTest</span> <span class="k">extends</span> <span class="nx">\PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;//</span> <span class="o">...</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">testDeveriaEnviarAPenasUmEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">user</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setemail</span><span class="p">(</span><span class="s2">&quot;cloudson@outlook.com&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setnews</span><span class="p">(</span><span class="nx">User</span><span class="o">::</span><span class="na">NEWS_TECHNOLOGY</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user2</span> <span class="o">=</span> <span class="k">clone</span> <span class="nv">$user</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setEmail</span><span class="p">(</span><span class="s2">&quot;joao@ti.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$user3</span> <span class="o">=</span> <span class="k">clone</span> <span class="nv">$user</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$user</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">setEmail</span><span class="p">(</span><span class="s2">&quot;maria@sensio.com&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$expected</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="s1">&#39;tecnologia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[</span><span class="s2">&quot;cloudson@outlook.com&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;filosofia&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$emails</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$user</span><span class="p">,</span> <span class="nv">$user2</span><span class="p">,</span> <span class="nv">$user3</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// apesar de passarmos 3 usuarios, </span>
</span><span class='line'>    <span class="c1">//o metodo send foi chamado apenas uma vez</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">mailer</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">expects</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">once</span><span class="p">())</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">method</span><span class="p">(</span><span class="s1">&#39;send&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$groups</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">service</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">sendall</span><span class="p">(</span><span class="nv">$emails</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Os testes passam e provam que nosso código está pronto :)
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">PHPUnit</span> <span class="mf">4.5</span><span class="o">.</span><span class="mi">0</span> <span class="nx">by</span> <span class="nx">Sebastian</span> <span class="nx">Bergmann</span> <span class="k">and</span> <span class="nx">contributors</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&amp;</span><span class="nx">hellip</span><span class="p">;</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span><span class="o">:</span> <span class="mi">42</span> <span class="nx">ms</span><span class="p">,</span> <span class="nx">Memory</span><span class="o">:</span> <span class="mf">3.25</span><span class="nx">Mb</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">OK</span> <span class="p">(</span><span class="mi">4</span> <span class="nx">tests</span><span class="p">,</span> <span class="mi">4</span> <span class="nx">assertions</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Novos testes?</h2>

<p>Quando falamos em testes unitários, podemos verificar a <a href="https://en.wikipedia.org/wiki/Code_coverage">cobertura</a> do mesmo, que seria; baseado nos seus testes, quais partes de seu código são atingido por eles? Isso poderia dar um indício de bons locais onde possíveis bugs podem aparecer.
Boas perguntas para novos casos de teste poderiam ser:</p>

<ul>
<li>Quando um usuario é do tipo filosofia, ele recebe email filosofia?</li>
<li>Quando um usuario recebe um status diferente de seu tipo, o que acontece?</li>
<li>Quando a api não retorna um json esperado, o que a classe Newsletter faz?</li>
<li>E se eu quisesse personalizar mais o corpo dos e-mails?</li>
</ul>


<h2>Conclusão</h2>

<p>O TDD é um bom método para pensarmos melhor no problema, a velocidade de desenvolvimento nos fala sobre nosso entendimento e a cobertura pode ser uma métrica interessante para novos desenvolvedores no projeto.
Ufa! Deu trabalho, mas nossa classe está coberta de testes, e caso alguem a altere, os testes podem alertar problemas.</p>
]]></content>
  </entry>
  
</feed>
