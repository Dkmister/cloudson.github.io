<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c | Claudson Oliveira]]></title>
  <link href="http://cloudson.github.io/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://cloudson.github.io/"/>
  <updated>2015-03-02T21:26:58-03:00</updated>
  <id>http://cloudson.github.io/</id>
  <author>
    <name><![CDATA[Claudson Oliveira]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ponteiros e gerenciamento de memória em C]]></title>
    <link href="http://cloudson.github.io/2015/02/22/ponteiros-e-gerenciamento-de-memoria-em-c/"/>
    <updated>2015-02-22T18:34:06-03:00</updated>
    <id>http://cloudson.github.io/2015/02/22/ponteiros-e-gerenciamento-de-memoria-em-c</id>
    <content type="html"><![CDATA[<p>Cá estamos novamente para mais um tópico de Computação. Depois de falarmos sobre <a href="/2013/09/28/conversao-de-base-numerica/">conversão de base numérica</a> e até um <a href="/2014/08/12/entendendo-uma-negociacao-de-conteudo-via-cartas/">pouco sobre http</a> vamos entender como funciona o gerenciamente de memória RAM e o que são referências nas linguagens de programação. Para entender o assunto, usaremos uma linguagem que lida muito bem com memória, a linguagem C.</p>

<h2>Palavra computacional</h2>

<p>Antes de falarmos diretamente sobre memória, há uma convenção que precisamos estabelecer.
Definimos por palavra computacional uma medida usada no reservamento de espaços na memória.
Os sistemas operacionais modernos trabalham normalmente em arquiteturas de 32 ou 64 bits, isso define nossa palavra (word). 32 bits é o mesmo que 4 bytes (já que cada byte possui 8 bits). Veremos que quando declaramos uma variável <em>int</em> em C, estamos pedindo para o sistema operacional reservar metade de uma palavra computacional na memória principal, o que pode ser esses 2 bytes nos sistemas de 32 bits ou 4 bytes nos sistemas de 64 bits. Alguns tipos em C pedem uma palavra computacional, como o tipo float.</p>

<h2>Memória principal</h2>

<p>Memórias são lugares onde guardamos dados importantes e todo programa trabalha com pelo menos um tipo de memória.
Um computador pode ser dividio em tipos de memória como vemos na imagem abaixo:</p>

<p><img src="/images/posts/memorias.jpg" alt="" /></p>

<p>A pilha de memória fala sobre vantagens e desvantagens das mesmas, a memória principal ou primária é uma das mais vantajosas, pois tem um espaço relativamente grande e de rápido acessado para escrita e leitura, ou seja, se tivermos que gravar dados em algum lugar de forma a recuperá-los rapidamente, a memória principal é um bom lugar. Um nome mais comum para esse local é Memória RAM. <br/>
A memória secundária fala sobre o disco rígido (HD). É muito custoso (demorado) gravar dados no disco, por ser formado por pratos magnéticos, mas sua grande vantagem é a de trabalhar com uma tecnologia que torna os dados persistentes (você pode desligar seu computador que os dados ainda estarão lá), diferente da memória principal que é volátil (zerada ao desligarmos a máquina).</p>

<h2>O que são variáveis?</h2>

<p>Um dos primeiros conceitos que aprendemos nos cursos de programação são variáveis. Quando falamos em variáveis estamos falando em lugares na memória principal. Por exemplo, no código abaixo, estamos apenas declarando uma variável do tipo inteiro em C, com valor 25.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ao declararmos uma variável inteira em C, estamos na verdade pedindo para o sistema operacional reservar (ou alocar) um espaço na memória RAM do tamanho de &frac12; palavra computacional, sendo então 4 bytes numa arquitetura de 64 bits.  Para o computador e o sistema operacional, o nome &ldquo;idade&rdquo; é irrelevante, ele é apenas um label para humanos e a cada vez que é citado, estamos na verdade falando de um lugar da memória.</p>

<p><img src="/images/posts/p1.png" alt="" /></p>

<h3>Acessando valores</h3>

<p>Vamos utilizar a função printf do C para imprimir na tela valores.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">idade</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">// temos um resultado na tela: 25, \n quer dizer uma quebra de linha no console</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ao passar &ldquo;idade&rdquo; para a função printf, estamos ordenando para o sistema operacional imprimir na tela o valor guardado no endereço de memória com label idade.</p>

<h3>Descobrindo o endereço na memória de variáveis</h3>

<p>Mas se quiséssemos imprimir o próprio endereço de memória ao invés do valor guardado usaríamos o formatador &ldquo;%p&rdquo; e acessaríamos &ldquo;&amp;idade&rdquo;, veja abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">p</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">idade</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>O &ldquo;ê comercial&rdquo; (&amp;) explicita que estamos falando do endereço de memória e não do valor contido na varíavel.
A saída será um hexadecimal como 0x7fff943aa52c. Claro que se você rodar o programa, outro valor será encontrado, já que como o próprio nome diz, a memória ram é uma memória de acesso randômico (aleatório).</p>

<p><img src="/images/posts/p2.png" alt="" /></p>

<h2>Ponteiros</h2>

<p>Agora que entendemos que cada variável na verdade é um lugar na memória que guarda um valor, vamos falar de ponteiros. A definição se torna bem mais simples do que parece, mas primeiro vamos incrementar nosso código, veja abaixo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">// declaração de uma variavel ponteiro</span>
</span><span class='line'>   <span class="c1">// que irá apontar para um lugar que guarda um valor inteiro</span>
</span><span class='line'>   <span class="kt">int</span> <span class="o">*</span> <span class="n">ponteiro_idade</span><span class="p">;</span>
</span><span class='line'>   <span class="c1">//variavel ponteiro_idade recebe o endereco de idade</span>
</span><span class='line'>   <span class="n">ponteiro_idade</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">idade</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="c1">// valor guardado e o local da memória onde está</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">d</span><span class="p">,</span> <span class="o">%</span><span class="n">p</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">idade</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">idade</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">// o valor de ponteiro_idade é o endereco de idade</span>
</span><span class='line'>   <span class="c1">// para acessar o valor do endereço apontado por ponteiro_idade</span>
</span><span class='line'>   <span class="c1">// usamos *</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">p</span><span class="p">,</span> <span class="o">%</span><span class="n">d</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">ponteiro_idade</span><span class="p">,</span> <span class="o">*</span><span class="n">ponteiro_idade</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ou seja, se variáveis guardam valores de um certo tipo, uma variavel ponteiro guarda um endereço de memória, que provavelmente é o endereço de outra variável. Veja o esquema abaixo:</p>

<p><img src="/images/posts/p3.png" alt="" /></p>

<h2>Passagem por valor e referência</h2>

<p>Quando estudamos funções pela primeira vez, aprendemos dois conceitos básicos sobre os paramêtros. É possível fazer passagem por valor:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">function</span> <span class="n">minha_func</span><span class="p">(</span><span class="kt">int</span> <span class="n">idade</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">idade</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Nessa passagem, ao chamarmos a funcao &ldquo;minha_func&rdquo; passando um valor inteiro, esse valor será copiado para um novo lugar na memória que será manipulado dentro da função.
Numa passagem por refência, a função &ldquo;minha_func&rdquo; espera um ponteiro para um inteiro, ou seja, passaríamos o próprio endereço de um lugar que guarda um inteiro. Se alteramos o valor da variável dentro da função, fora dela, o valor permaneceria alterado.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">function</span> <span class="n">minha_func</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span> <span class="n">idade</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">idade</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Tipos de Alocação</h2>

<p>Em C, podemos declarar tipos composto de dados, veja abaixo um tipo de dado que define uma pessoa:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">s_pessoa</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">idade</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="n">nome</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">s_pessoa</span> <span class="o">*</span> <span class="n">irmao</span> <span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="n">Pessoa</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Existem duas formas de construir &ldquo;instâncias&rdquo; ou variáveis desse tipo, utilizando alocação estático e dinâmico.</p>

<h3>Alocação estática</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Pessoa</span> <span class="n">eu</span><span class="p">;</span>
</span><span class='line'><span class="n">eu</span><span class="p">.</span><span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>No alocamento estático, assim que o programa é iniciado, um espaço na memória já é reservado para a variavel &ldquo;eu&rdquo; do tipo Pessoa. Como podemos ver abaixo são reservadas 4 bytes  pro int, e 2 palavras para os endereços guardados nas variáveis ponteiro.</p>

<p><img src="/images/posts/p4.png" alt="" /></p>

<p>É intessante vermos os endereços da própria estrutura e dos campos da mesma.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Pessoa</span> <span class="n">eu</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">eu</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">eu</span><span class="p">.</span><span class="n">idade</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">eu</span><span class="p">.</span><span class="n">nome</span><span class="p">));</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">eu</span><span class="p">.</span><span class="n">irmao</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Teremos o seguinte resultado na tela</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0x7fff1b6b46c0
</span><span class='line'>0x7fff1b6b46c0
</span><span class='line'>0x7fff1b6b46c8
</span><span class='line'>0x7fff1b6b46d0
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Podemos perceber que o endereço da estrutura é o endereço do primeiro campo, e num sistema de 64 bits, o terceiro campo é o endereço do segundo + 8 bytes (tamanho do segundo campo). Você pode perceber que apesar do primeiro campo ter 4 bytes, está a 8 bytes de distancia do segundo. Isso acontece por causa de uma <a href="http://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member/119128#119128">correção com padding</a> que o C faz para manter as estruturas proporcionais ao tamanho da palavra.</p>

<p><img src="/images/posts/p5.png" alt="" /></p>

<h3>Alocação dinâmica</h3>

<p>Na alocação dinâmica, trabalhamos com ponteiros para tipos compostos. Quando o programa se inicia, nada é alocado para a variavel além de uma palavra para guardar um endereço.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Pessoa</span> <span class="o">*</span> <span class="n">eu</span><span class="p">;</span>
</span><span class='line'><span class="c1">// muitas e muitas linhas de código ...</span>
</span><span class='line'><span class="n">eu</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Pessoa</span><span class="p">));</span>
</span><span class='line'><span class="n">eu</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">idade</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Apenas quando a função malloc é invocado, uma chamada para o sistema operacional solicita um espaco de memória do tamanho do tipo Pessoa (3 palavras) e o endereço para o início desse local é guardado na variavel &ldquo;eu&rdquo;. Perceba também que o operador de acesso na estrutura também muda de ponto para seta (&ndash;>).</p>

<h2>Desalocação de memória</h2>

<p>Vamos olhar pro nosso último código e imaginar que abaixo da última linha, há centanas de milhares de linhas de código. E que na verdade a variavel eu não foi utilizada. O que aconteceria é que o programa teria alocado uma espaço desnecessário na memória e que esse espaço só seria liberado para outros programas, por exemplo, após nossa execução terminar. Você pode pensar que é um assunto dispensável, mas se nossa estrutra fosse muito maior que 1 palavra computacional, teríamos um impacto bem negativo.<br/>
Em linguagens de mais autonível, temos mecanismos automáticos e padrão para desalocar memória. Um mecanismo chamado <a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">garbage collector</a> entra em ação de tempos em tempos em linguagens como o Java para perceber quais variáveis não estao sendo usadas e podem ser liberadas. Como eles sabem quais variáveis? Há várias técnicas (e <a href="http://stackoverflow.com/questions/18822178/java-cyclic-reference-and-garbage-collections">problemas envolvidos</a>) mas a mais simples é a de contagem de referência. Nela, cada vez que a variável é referenciada, um contador é incrementado, e quando deixa de ser citada, decrementado. Sabendo assim que todas as variáveis com contador zero podem ser desalocadas.<br/>
Em linguagens de mais baixo nível como C, é preciso destruir memórias &ldquo;na mão&rdquo;, utilizando a <a href="http://www.cplusplus.com/reference/cstdlib/free/">função free</a>.</p>

<h2>Conclusão</h2>

<p>Apesar de parecer um assunto complicado a princípio, os ponteiros são facilmente manipulados na linguagem C, e nos dão base para entender vários outros conceitos usadas em linguagens mais modernas, como Java ou PHP. Espero voltar em breve para falar sobre estruturas de dados que utilizamos no dia-a-dia.</p>

<h3>Referências</h3>

<ul>
<li><a href="https://pt.wikipedia.org/wiki/Palavra_%28ci%C3%AAncia_da_computa%C3%A7%C3%A3o%29">https://pt.wikipedia.org/wiki/Palavra_%28ci%C3%AAncia_da_computa%C3%A7%C3%A3o%29</a></li>
<li><a href="http://stackoverflow.com/questions/18822178/java-cyclic-reference-and-garbage-collections">http://stackoverflow.com/questions/18822178/java-cyclic-reference-and-garbage-collections</a></li>
<li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html">http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html</a></li>
<li><a href="http://www.cplusplus.com/reference/cstdlib/free/">http://www.cplusplus.com/reference/cstdlib/free/</a></li>
<li><a href="http://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member/119128#119128">http://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member/119128#119128</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
